#!/usr/bin/env python

import mfer.post as mp
import numpy as np
import matplotlib.pyplot as plt

ps = "."
ds = mp.get_series(ps, cache=0)
hs = mp.get_history(ds)
lbs = "hydro"



# plot lines
xs0 = hs['x'] - hs['x'][0]
#ts = hs['t']
mp.plot_lines([
        {'x':xs0, 'y':hs['y'], 'lb':lbs},
        ] , preset='y')

mp.plot_lines([
        {'x':xs0, 'y':hs['u'], 'lb':lbs},
        ] , preset='u')

vol0 = hs['vol'][0]
mp.plot_lines([
        {'x':xs0, 'y':(hs['vol']-vol0)/vol0, 'lb':lbs},
        ] , preset='m')

# plot streamlines for best step 
xr = 0.5  # reference center
lx = 1.
n = -1
x = np.array(ds['x'][n])
xs = hs['x'][n]  # current center
# move mesh by k*lx so that xs is bubble center
x = x - (x.min() - x.min() % lx) + xs - (xs % lx) 
#cond = (x  + xr - xs < lx) 
#il = np.where(cond)[0]
#ir = np.where(~cond)[0]
#x[ir] -= lx 
shift = (xr - (xs - x.min()) + lx) % lx
x = x.min() + (x - x.min() + shift) % lx - shift
mp.plot_stream(x, ds['y'][n], ds['u'][n], ds['v'][n], ds['f'][n])

# plot contour
skip=1
for n in range(len(ds['x']))[::skip]:
    x = ds['x'][n]
    y = ds['y'][n]
    a = ds['f'][n]
    a = np.clip(a, 0.01, 0.99)

    fo = "contour_{:04d}.png".format(n)
    fig = plt.figure(figsize=(5.,5.))
    fig.patch.set_facecolor('black')
    ax = plt.Axes(fig, [0., 0., 1., 1.])
    ax.set_axis_off()
    fig.add_axes(ax)
    ax.tricontourf(x, y, a, 128, cmap=plt.cm.Greys_r, vmin=0., vmax=1.)
    #plt.tight_layout()
    print(fo)
    plt.savefig(fo, dpi=300)
    plt.close()

