#!/usr/bin/env python

import mfer.post as mp
import numpy as np

ps = "."
ds = mp.get_series(ps, cache=0)
hs = mp.get_history(ds)
lbs = "hydro"

pr = "ref/"
hr1x,hr1y = np.loadtxt(pr + 'xy').T
hr2x,hr2u = np.loadtxt(pr + 'xu').T
lbr = "Mortazavi"



# plot lines
xs0 = hs['x'] - hs['x'][0]
#ts = hs['t']
mp.plot_lines([
        {'x':xs0, 'y':hs['y'], 'lb':lbs},
        {'x':hr1x, 'y':hr1y, 'lb':lbr},
        ] , preset='y')

mp.plot_lines([
        {'x':xs0, 'y':hs['u'], 'lb':lbs},
        {'x':hr2x, 'y':hr2u, 'lb':lbr},
        ] , preset='u')

vol0 = hs['vol'][0]
mp.plot_lines([
        {'x':xs0, 'y':(hs['vol']-vol0)/vol0, 'lb':lbs},
        ] , preset='m')

# plot streamlines for best step 
xr = 0.88  # bubble center on reference
lx = 1.
xs = hs['x']
sel = np.where(xs > xs.max() - 2. * lx)[0]
n = sel[np.argmin(np.abs((xs[sel]) % lx - xr))]
mp.plot_stream(ds['x'][n], ds['y'][n], 
        ds['u'][n], ds['v'][n], ds['f'][n], bg=pr + "s.png")

# plot contour
skip=10
for n in range(len(ds['x']))[::skip]:
    fo = "contour_{:04d}.png".format(n)
    mp.plot_contour(ds['x'][n], ds['y'][n], 
        np.clip(ds['f'][n], 0., 1.), fo=fo, fill=True)

for n in range(len(ds['x']))[::skip]:
    fo = "contour_p_{:04d}.png".format(n)
    mp.plot_contour(ds['x'][n], ds['y'][n], 
        ds['p'][n], fo=fo, fill=True)

for n in range(len(ds['x']))[::skip]:
    u = ds['u'][n]
    v = ds['v'][n]
    u0 = np.average(u, weights=ds['f'][n])
    v0 = np.average(v, weights=ds['f'][n])
    u -= u0
    v -= v0
    m = (u ** 2 + v ** 2) ** 0.5
    fo = "contour_u_{:04d}.png".format(n)
    mp.plot_contour(ds['x'][n], ds['y'][n], 
        #np.clip(ds['f'][n], 0., 1.), fo=fo, fill=True)
        m, fo=fo, fill=True)
